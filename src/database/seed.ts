import { sql } from 'drizzle-orm'
import { getTableConfig } from 'drizzle-orm/pg-core'

import db from '@/database'
import * as schema from '@/database/schemas'
import * as seeds from '@/database/seeds'
import { auth } from '@/lib/auth'
import * as path from 'path'
import * as fs from 'fs'

type SeedOptions = {
	tableReset: boolean
	storedProcedures: boolean
	publicUserCount: number
}

const seedOptions: SeedOptions = {
	tableReset: true,
	storedProcedures: true,
	publicUserCount: 5,
}

function getSchemaTableNames(): string[] {
	// Ã–sszegyÅ±jti az Ã¶sszes tÃ¡bla objektumot a sÃ©mÃ¡bÃ³l
	const allTables = Object.values(schema).filter((obj) => {
		const isObject = typeof obj === 'object' && obj !== null
		if (!isObject) return false

		// SzÅ±rÃ©s a Drizzle tÃ¡blÃ¡kra az IsDrizzleTable szimbÃ³lum alapjÃ¡n
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		return (obj as any)[Symbol.for('drizzle:IsDrizzleTable')] === true
	})

	// LekÃ©rdezi a tÃ¡blÃ¡k neveit (opcionÃ¡lis)
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const allTableNames = allTables.map((table) => getTableConfig(table as any).name)

	return allTableNames
}

/**
 * KiÃ¼rÃ­ti az Ã¶sszes tÃ¡blÃ¡t fordÃ­tott fÃ¼ggÅ‘sÃ©gi sorrendben.
 */
async function resetTables() {
	// Az Ã¶sszes tÃ¡bla kiÃ¼rÃ­tÃ©se fordÃ­tott fÃ¼ggÅ‘sÃ©gi sorrendben
	const tablesToReset = [
		// KapcsolÃ³tÃ¡blÃ¡k (junction tables) - elÅ‘szÃ¶r ezeket kell tÃ¶rÃ¶lni
		schema.userRoles,
		schema.rolePermissions,
		schema.groupPermissions,
		schema.userGroups,

		// AutentikÃ¡ciÃ³s tÃ¡blÃ¡k
		schema.verifications,
		schema.sessions,
		schema.accounts,

		// Audit tÃ¡blÃ¡k
		schema.auditLogs,

		// EntitÃ¡s tÃ¡blÃ¡k
		schema.users,
		schema.permissions,
		schema.roles,
		schema.groups,
		schema.resources,
		schema.providers,
	]

	const schemaTables = getSchemaTableNames()

	console.log('[TÃ¡blÃ¡k kiÃ¼rÃ­tÃ©se]')
	for (const table of tablesToReset) {
		await db.execute(sql`TRUNCATE TABLE ${table} RESTART IDENTITY CASCADE`)
		const tableConfig = getTableConfig(table)

		// EltÃ¡volÃ­tjuk a kiÃ¼rÃ­tett tÃ¡blÃ¡t a schemaTables listÃ¡bÃ³l
		const index = schemaTables.indexOf(tableConfig.name)
		if (index > -1) {
			schemaTables.splice(index, 1)
		}

		console.log(` - ${tableConfig.name} sikeresen kiÃ¼rÃ­tve`)
	}

	if (schemaTables.length > 0) {
		console.log(
			'ğŸ”´ A kÃ¶vetkezÅ‘ tÃ¡blÃ¡k hiÃ¡nyoznak a kiÃ¼rÃ­tÃ©si folyamatbÃ³l:',
			schemaTables.join(', '),
		)
		console.log('ğŸŸ¡ TÃ¡blÃ¡k rÃ©szegesen kiÃ¼rÃ­tve\n')
	} else {
		console.log('ğŸŸ¢ TÃ¡blÃ¡k sikeresen kiÃ¼rÃ­tve\n')
	}
}

/**
 * KiindulÃ¡si tÃ¡bla adatok betÃ¶ltÃ©se.
 */
async function seedTableData() {
	// Seed adatok betÃ¶ltÃ©se a fÃ¼ggÅ‘sÃ©gi sorrend figyelembevÃ©telÃ©vel

	console.log('[TÃ¡bla adatok betÃ¶ltÃ©se]')

	// 1. Alap entitÃ¡sok (nincs kÃ¼lsÅ‘ kulcs fÃ¼ggÅ‘sÃ©gÃ¼k)
	console.log(' - AlapentitÃ¡sok betÃ¶ltÃ©se...')
	await seeds.resources(db) // ErÅ‘forrÃ¡sok
	await seeds.providers(db) // HitelesÃ­tÃ©si szolgÃ¡ltatÃ³k
	await seeds.groups(db) // Csoportok
	await seeds.roles(db) // SzerepkÃ¶rÃ¶k

	// 2. JogosultsÃ¡gok (fÃ¼ggenek az erÅ‘forrÃ¡soktÃ³l)
	console.log(' - JogosultsÃ¡gok betÃ¶ltÃ©se...')
	await seeds.permissions(db) // JogosultsÃ¡gok

	// 3. Kapcsolatok az entitÃ¡sok kÃ¶zÃ¶tt
	console.log(' - EntitÃ¡s kapcsolatok betÃ¶ltÃ©se...')
	await seeds.rolePermissions(db) // SzerepkÃ¶r-jogosultsÃ¡g kapcsolatok
	await seeds.groupPermissions(db) // Csoport-jogosultsÃ¡g kapcsolatok

	// 4. FelhasznÃ¡lÃ³k Ã©s kapcsolataik
	console.log(' - FelhasznÃ¡lÃ³k Ã©s kapcsolataik betÃ¶ltÃ©se...')
	await seeds.users(auth, db, seedOptions.publicUserCount) // FelhasznÃ¡lÃ³k
	await seeds.userRoles(db) // FelhasznÃ¡lÃ³-szerepkÃ¶r kapcsolatok
	console.log('ğŸŸ¢ Minden tÃ¡bla adat sikeresen betÃ¶ltve\n')
}

/**
 * BetÃ¶lti a tÃ¡rolt eljÃ¡rÃ¡sokat.
 */
async function seedStoredProcedures() {
	console.log('[TÃ¡rolt eljÃ¡rÃ¡sok betÃ¶ltÃ©se]')
	const proceduresDir = path.join(__dirname, 'procedures')
	// Recursive function to find all SQL files in a directory and its subdirectories
	function findSqlFiles(dir: string): string[] {
		let sqlFiles: string[] = []
		const items = fs.readdirSync(dir)

		for (const item of items) {
			const itemPath = path.join(dir, item)
			const stats = fs.statSync(itemPath)

			if (stats.isDirectory()) {
				// If directory, recursively search inside it
				sqlFiles = sqlFiles.concat(findSqlFiles(itemPath))
			} else if (stats.isFile() && item.endsWith('.sql')) {
				// If SQL file, add to the list
				sqlFiles.push(itemPath)
			}
		}

		return sqlFiles
	}

	const sqlFilePaths = findSqlFiles(proceduresDir)

	for (const filePath of sqlFilePaths) {
		const procedureSQL = fs.readFileSync(filePath, 'utf8')
		await db.execute(sql.raw(procedureSQL))
		console.log(` - hozzÃ¡adÃ¡s a(z) ${path.relative(proceduresDir, filePath)} fÃ¡jlbÃ³l`)
	}
	console.log('ğŸŸ¢ Minden tÃ¡rolt eljÃ¡rÃ¡s sikeresen betÃ¶ltve\n')
}

/**
 * Seed adatok betÃ¶ltÃ©se.
 */
async function main() {
	// TÃ¡blÃ¡k kiÃ¼rÃ­tÃ©se
	if (seedOptions.tableReset) {
		await resetTables()
	}

	// KiindulÃ¡si tÃ¡bla adatok betÃ¶ltÃ©se
	await seedTableData()

	// TÃ¡rolt eljÃ¡rÃ¡sok betÃ¶ltÃ©se
	if (seedOptions.storedProcedures) {
		await seedStoredProcedures()
	}
}

main()
	.catch((e) => {
		console.error(e)
		process.exit(1)
	})
	.finally(async () => {
		console.log('ğŸ‘Œ Minden seed adat sikeresen betÃ¶ltve!')
		process.exit(0)
	})
